In 0/1 Knapsack- Either we take the item or we leave the item, also we have limited quantity of items.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Version1 - Non-DP,just recursive solution
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

value = [24,18,18,10]
weight = [24,10,10,7]
W = 25
n = len(value)-1  # last index of value or weight array

_______________________________________________________________________________________________________________________________________
def knapsack(weight,value,W,n):
    if n == 0 or W == 0:
        return 0
    # n = 0 means nothing to steal and W = 0 means no bag to fill
    if weight[n] <= W:
        return max(value[n]+knapsack(weight,value,W-weight[n],n-1),knapsack(weight,value,W,n-1))

    elif weight[n] > W:
        return knapsack(weight,value,W,n-1)

print(knapsack(weight,value,W,n))
________________________________________________________________________________________________________________________________________---

Version2 - Dp with memo (Top Down approach)

Since we have two changing values (capacity W and currentIndex n) in our recursive function knapsack()
we can use a two-dimensional array to store the results of all the solved sub-problems. dp[n][w]
dp matrix will have col = all possible weights ie W+1
and rows = n+1
As mentioned above, we need to store results for every sub-array (i.e. for every possible index ‘n’) 
and for every possible capacity ‘W’.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

value = [24,18,18,10]
weight = [24,10,10,7]
W = 25
n = len(value)-1
_______________________________________________________________________________________________________________________________________---
rows = n+1
cols = W+1

dp = []  # creating table to store the result
for _ in range(rows):
    dp.append([-1]*cols)

def knapsack(weight,value,W,n):
    if n == 0 or W == 0:
        return 0
    # n = 0 means nothing to steal and W = 0 means no bag to fill
    if dp[n][W] != -1:
        return dp[n][w]
    else:
        if weight[n] <= W:
            dp[n][W] = max(value[n]+knapsack(weight,value,W-weight[n],n-1),knapsack(weight,value,W,n-1))
            return dp[n][W]

        elif weight[n] > W:
            dp[n][W] =knapsack(weight,value,W,n-1)
            return dp[n][W]

print(knapsack(weight,value,W,n))

_____________________________________________________________________________________________________________________________________
Version 3 - Bottom to up approach (Table method):

Idea is to convert recursive sol to iterative sol for faster results

value = [60,100,120]
weight = [10,20,30]
W = 50
n = len(value)
_______________________________________________________________________________________________________________________________________
dp = []   # create a table of size nxW
for i in range(n+1):
    dp.append([-1]*(W+1))

for i in range(n+1):
    for j in range(W+1):    # i is the idx in value or weight matrix and j represents different values of W
        if i == 0 or j == 0:  # base condition ------> initilisation in matrix
            dp[i][j] = 0
        elif weight[i-1] <= j:  #  converting recursive sol to iterative sol by changing functional calls to matrix values
            dp[i][j] = max(value[i-1]+dp[i-1][j-weight[i-1]],dp[i-1][j])
        else:
            dp[i][j] = dp[i-1][j]
print(dp[n][W])   # last value of the matrix will give the sol to the prob while lesser than that indexes are optimum sol to subprobs
_____________________________________________________________________________________________________________________________________

Version 3 - Bottom to Up approach ( Tabular Method);
-----------------------------------------------------

arr = [7,3,2,5,8]
S = 14
n = len(arr)

_____________________________________________________________________________________________________________________________________
# Step 1 - Create DP table with variables that can change
dp = []
for i in range(n+1):
    dp.append([-1]*(S+1))

# Step 2 - Do initalisation which is equal to recursive sol base case
for i in range(n+1):
    for j in range(S+1):
        if j == 0:  # if sum is zero then empty subset is always one answer
            dp[i][j] = True
        if j > 0 and i == 0:  # if there is no element in set and we want sum greater than 0, it is not possible
            dp[i][j] = False

# Step 3 - convert the recursion calls into iterative solution
for i in range(1,n+1):
    for j in range(1,S+1):
        if arr[i-1] <= j:
            dp[i][j] = dp[i-1][j-arr[i-1]] or dp[i-1][j]

        else:
            dp[i][j] = dp[i-1][j]

# To print DP table
# for i in range(n+1):
#     for j in range(S+1):
#         print(dp[i][j], end  =" ")
#     print()


print(dp[n][S])

____________________________________________________________________________________________________________________________________

