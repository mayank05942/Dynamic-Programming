 Leetcode: disguised LCS : https://leetcode.com/problems/uncrossed-lines/
 __________________________________________________________________________________________________________________________
 
 
 Method 1 - Non DP --> Will give TLE
 ------------------------------------
 
 class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        n1 = len(text1)
        n2 = len(text2)
        def LCS(text1,text2,n1,n2):
            if n1 == 0 or n2 == 0:  # if any of the two string is empty then LCS will be 0
                return 0
            if text1[n1-1] == text2[n2-1]:   # Choice 1  is last element of both string matches
                return 1 + LCS(text1,text2,n1-1,n2-1)  # +1 because last one is one common string
            else:
                return max(LCS(text1,text2,n1-1,n2),LCS(text1,text2,n1,n2-1))  # else there are two possible cases and we have to select max of them

        return LCS(text1,text2,n1,n2)
_____________________________________________________________________________________________________________________________________________________

Method 2 - Bottom to top DP (MEMO)  ---> Accepted
------------------------------------

class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        n1 = len(text1)
        n2 = len(text2)
        dp = []
        for _ in range(n1+1):
            dp.append([-1]*(n2+1))

        def LCS(text1,text2,n1,n2):
            if n1 == 0 or n2 == 0:
                return 0

            if dp[n1][n2] != -1:
                return dp[n1][n2]
            else:

                if text1[n1-1] == text2[n2-1]:
                    dp[n1][n2] = 1 + LCS(text1,text2,n1-1,n2-1)  # +1 because last one is one common string
                    return dp[n1][n2]
                else:
                    dp[n1][n2]= max(LCS(text1,text2,n1-1,n2),LCS(text1,text2,n1,n2-1))
                    return dp[n1][n2]

        return LCS(text1,text2,n1,n2)
____________________________________________________________________________________________________________________________________

Method 3 - Tabular DP (Accepted):
----------------------------------
class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        n1 = len(text1)
        n2 = len(text2)
        
        dp = []
        for _ in range(n1+1):
            dp.append([-1]*(n2+1))
            
        for i in range(n1+1):
            for j in range(n2+1):
                if i == 0 or j == 0:
                    dp[i][j] = 0
        #print(dp)           
        for i in range(1,n1+1):
            for j in range(1,n2+1):
                if text1[i-1] == text2[j-1]:
                    dp[i][j] = dp[i-1][j-1]+1
                else:
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1])
                    
        return dp[n1][n2]

        
