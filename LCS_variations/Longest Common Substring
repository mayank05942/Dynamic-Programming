Prob: Leetcode: https://leetcode.com/problems/maximum-length-of-repeated-subarray/submissions/ 

_________________________________________________________________________________________________________________________________________________________

Explanation

# Variation of Longest common subsequence

  

__________________________________________________________________________________________________________________________________________________________

Code:

text1 = "abcdxyz"
text2 = "xyzabcd"
m = len(text1)
n = len(text2)
dp = []
for _ in range(m+1):
    dp.append([-1]*(n+1))

for i in range(m+1):
    for j in range(n+1):
        if i == 0 or j == 0:
            dp[i][j] = 0
for i in range(1,m+1):
    for j in range(1,n+1):
        if text1[i-1] == text2[j-1]:
            dp[i][j] = 1 + dp[i-1][j-1]   # Characters are equal - remove these characters and add 1 to the count without these (ending) characters (by 1 cell) - 1 + dp[i -1][j - 1], 
        else:
            dp[i][j] = 0  #----> Characters are different - reset the longest common suffix to 0
res = 0
for i in range(m+1):   # Now return the substring with max length by returing the max value in dp
    for j in range(n+1):
        if dp[i][j] > res:
            res = dp[i][j]
print(res)

# cell of dp here represents longest common substring ending at m-1 th char in text1 & n-1 th char in text2

_____________________________________________________________________________________________________________________________________________________________________

Printing the larget common subarray or substring:
--------------------------------------------------

res = 0
x,y = 0,0
for i in range(m+1):   # Now return the substring with max length by returing the max value in dp
    for j in range(n+1):
        if dp[i][j] > res:
            res = dp[i][j]
            x,y = i,j

arr = []

while res:
  arr.append(text2[y-1])
  y -= 1
  res -= 1
arr = arr[::-1]
print(arr)

