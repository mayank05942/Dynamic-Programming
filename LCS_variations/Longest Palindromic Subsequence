  
  Prob: https://leetcode.com/problems/longest-palindromic-subsequence/
  ______________________________________________________________________________________________________________________________
  Theory : This prob is simliar to LCS there we have to find the longest common subsequence here we have to find longest 
  palindromic subsequence.
  
  But here we have only one string.
  
  So the second string will be the reverse of the 1st and then we calculate LCS between the two to get the answer.
  ______________________________________________________________________________________________________________________________
  Code:
  
  class Solution:
    def longestPalindromeSubseq(self, s: str) -> int:
        text1 = s
        text2 = s[::-1]
        
        m = len(text1)
        n = len(text2)
        
        dp = []
        for _ in range(m+1):
            dp.append([-1]*(n+1))
            
        for i in range(m+1):
            for j in range(n+1):
                if i == 0 or j == 0:
                    dp[i][j] = 0
                    
        for i in range(1,m+1):
            for j in range(1,n+1):
                if text1[i-1] == text2[j-1]:
                    dp[i][j] = 1 + dp[i-1][j-1]
                    
                else:
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1])
                    
        return dp[m][n] 
 _______________________________________________________________________________________________________________________________
  
  
