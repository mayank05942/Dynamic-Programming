Prob: https://www.geeksforgeeks.org/minimum-number-deletions-insertions-transform-one-string-another/
_____________________________________________________________________________________________________________________________________

Explanation:
------------

Simplier version of Edit distance:

# Only operation we can perfrom are insertion and deletion

         str1 ---------------->  str2
     =>  str1--------> LCS(str1,str2) ----------> str2
     
     LCS(str1,str2) will give us the part that will remain the same in both strings
     
     LCS(str1,str2) will give the min # of deletions  =   len(str1) - LCS(str1,str2)
     
     min # of additions = len(str2) - LCS(str1,str2)
     
____________________________________________________________________________________________________________________________________

Code:
------

text1 = "geeksforgeeks"
text2 =  "geeks"
m = len(text1)
n = len(text2)
dp = []
for _ in range(m+1):
    dp.append([-1]*(n+1))

for i in range(m+1):
    for j in range(n+1):
        if i == 0 or j == 0:
            dp[i][j] = 0
for i in range(1,m+1):
    for j in range(1,n+1):
        if text1[i-1] == text2[j-1]:
            dp[i][j] = 1 + dp[i-1][j-1]
        else:
            dp[i][j] = max(dp[i-1][j], dp[i][j-1])

len_LCS = dp[m][n]

min_number_del = len(text1) - len_LCS
min_number_insertion = len(text2) - len_LCS

print(min_number_del,min_number_insertion)
