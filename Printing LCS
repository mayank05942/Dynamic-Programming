Task: Print LCS
-----------------------------------------------------------------------------------------------------------------------------------
# Write code of LCS

text1 = "abcde"
text2 = "ace"
m = len(text1)
n = len(text2)
dp = []
for _ in range(m+1):
    dp.append([-1]*(n+1))
lis = []
for i in range(m+1):
    for j in range(n+1):
        if i == 0 or j == 0:
            dp[i][j] = 0
for i in range(1,m+1):
    for j in range(1,n+1):
        if text1[i-1] == text2[j-1]:

            dp[i][j] = 1 + dp[i-1][j-1]
        else:
            dp[i][j] = max(dp[i-1][j],dp[i][j-1])


# Now we will start printing

# To understand the logic of how to print we have to understand the logic behind how the matrix is being filled.

i = m        # i and j both start with the last char
j = n
lis = []
while i > 0 or j > 0:  # if i < 0 means text1 is empty or j < 0 means text2 is empty [In either case we cannot proceed further]

    if text1[i-1] == text2[j-1]:   # if last char of text1 is equal to last char of text2
        lis.append(text1[i-1])     # append either of them into lis
        i -= 1                     # jump into (i-1,j-1) cell in dp matrix
        j -= 1
    else:
        if dp[i][j-1] > dp[i-1][j]:    # if last element is not equal then check (i-1,j) or (i,j-1) elements
            j -= 1                     # and move in the max direction of (i-1,j) and (i,j-1)
        else:
            i -= 1
            
lis.reverse()  # since we started with the last char, reverse the string
sol = "".join(lis)
print(sol)


