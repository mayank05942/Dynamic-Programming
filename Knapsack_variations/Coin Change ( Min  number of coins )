Prob: https://leetcode.com/problems/coin-change/
__________________________________________________________________________________________________________________

Explanation: Variation of unbounded knapsack

___________________________________________________________________________________________________________________
Code:

class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        n = len(coins)
        m = amount

        dp = []
        for _ in range(n+1):
            dp.append([-1]*(m+1))

        for i in range(n+1):
            for j in range(m+1):
                if j == 0 and i != 0:
                    dp[i][j] = 0
                if i == 0 :
                    dp[i][j] = float('inf')-1    # Don't know why

        for i in range(1,n+1):
            for j in range(1,m+1):
                if coins[i-1] <= j:
                    dp[i][j] = min(1 + dp[i][j-coins[i-1]],dp[i-1][j])
                else:
                    dp[i][j] = dp[i-1][j]

        res = dp[n][m]
        if res >= float('inf') -1 :   # Why???
            return -1
        else:
            return int(res)

