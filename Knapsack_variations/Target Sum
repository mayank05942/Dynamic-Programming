Prob: https://leetcode.com/problems/target-sum/
__________________________________________________________________________________________________________________________________

Explanation: https://leetcode.com/problems/target-sum/discuss/455024/DP-IS-EASY!-5-Steps-to-Think-Through-DP-Questions.

Base Case:

# When n < 0 and curr_sum == target_sum means we have visited all elements in the array and have found the traget sum
  return 1 showing there is one way around
  
# when n < 0 but curr_sum != target_sum means we have visited all elements but could not find target sum and return 0 [ no way]

Choice Diagram:

There are only 2 Choice: take the element as positive quantity or negative quantity

___________________________________________________________________________________________________________________________________

Code:

class Solution:
    def findTargetSumWays(self, nums: List[int], S: int) -> int:
    
        n = len(nums)-1
        dp = {}
        
        def helper(nums,n,curr_sum,target_sum):
        
            if n < 0  and curr_sum ==  target_sum:  # visited all items and found the target sum
                return 1
                
            if n < 0:  # vsisited all items but not found the target sum
                return 0
                
            if (n,curr_sum) in dp:
                return dp[n,curr_sum]
            else:
                choice1 = helper(nums,n-1,curr_sum+nums[n-1],target_sum)
                choice2 = helper(nums,n-1,curr_sum-nums[n-1],target_sum)
                dp[(n,curr_sum)] =  choice1 + choice2
                return dp[(n,curr_sum)]
       
        return helper(nums,n,0,S)
        
