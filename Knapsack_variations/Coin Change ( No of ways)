Prob: https://leetcode.com/problems/coin-change-2/
_____________________________________________________________________________________________________________________________

Explanation: Unbounded knapsack

Base cases:
if amount is 0 and coins >= 0 then there is always one way i.e no choose any coin
if amount > 0 and coins = 0 then there is no way to get make up that amount
______________________________________________________________________________________________________________________________

Code:

N = 4  # Target
S = [1,2,3]
n = len(S)
dp = []
for _ in range(n+1):
    dp.append([0]*(N+1))

for i in range(n+1):
    for j in range(N+1):
        if j == 0 and i >=0:
            dp[i][j] = 1
        if i == 0 and j > 0:
            dp[i][j] = 0

        if i == 0 and j == 0:
            dp[i][j] = 1


for i in range(n+1):
    for j in range(N+1):
        if S[i-1] <= j:
            dp[i][j] = dp[i][j-S[i-1]] + dp[i-1][j]

        else:
            dp[i][j] = dp[i-1][j]

print(dp[n][N])
