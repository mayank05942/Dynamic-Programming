# Variation of Longest common subsequence

Leetcode: https://leetcode.com/problems/maximum-length-of-repeated-subarray/submissions/   

text1 = "abcdxyz"
text2 = "xyzabcd"
m = len(text1)
n = len(text2)
dp = []
for _ in range(m+1):
    dp.append([-1]*(n+1))

for i in range(m+1):
    for j in range(n+1):
        if i == 0 or j == 0:
            dp[i][j] = 0
for i in range(1,m+1):
    for j in range(1,n+1):
        if text1[i-1] == text2[j-1]:
            dp[i][j] = 1 + dp[i-1][j-1]
        else:
            dp[i][j] = 0  #----> change if both char are not same then the length with be 0  -- > we are filling matrix here for diff subprobs
res = 0
for i in range(m+1):   # Now return the substring with max length by returing the max value in dp
    for j in range(n+1):
        if dp[i][j] > res:
            res = dp[i][j]
print(res)

# cell of dp here represents longest common substring ending at m-1 th char in text1 & n-1 th char in text2
