Prob: https://iq.opengenus.org/minimum-deletions-to-make-string-palindrome/

_________________________________________________________________________________________________________________________________________

Explanation:  Length of LPS = 1 / # of deletions
------------

Hence for min # of deletion length of LPS should be as large as possible

Hence ultimatley we have to find Longest Palindromic Subsequence

and then to calculate how many char we have deleted to make it LPS can be calculated as follows:

min # of deletions = len(string) - len(LPS)

_______________________________________________________________________________________________________________________________________
Code:

text1 = "NITIN"
text2 = text1[::-1]
m = len(text1)
n = len(text2)
dp = []
for _ in range(m+1):
    dp.append([-1]*(n+1))

for i in range(m+1):
    for j in range(n+1):
        if i == 0 or j == 0:
            dp[i][j] = 0
for i in range(1,m+1):
    for j in range(1,n+1):
        if text1[i-1] == text2[j-1]:
            dp[i][j] = 1 + dp[i-1][j-1]
        else:
            dp[i][j] = max(dp[i-1][j], dp[i][j-1])

len_LPS = dp[m][n]

min_number_del = len(text1) - len_LPS

print(min_number_del)

