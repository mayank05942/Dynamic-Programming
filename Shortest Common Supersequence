


Variant 1 : Find the length of SCS:
------------------------------------

Method: Worst Case length - LCS length
=======

Worst case is when we join both the string and then calculate the length ----> it will be the biggest SCS

Since LCS contains all the common elements in the both the string hence subtracting it will worstcase will result in SCS length.

______________________________________________________________________________________________________________________________________
class Solution:
    def shortestCommonSupersequence(self, str1: str, str2: str) -> str:
        worst_case = str1+str2
        len_worst_case = len(worst_case)
        m = len(str1)
        n = len(str2)
        def LCS(str1,str2,m,n):
            if m == 0 or n == 0:
                return 0
            elif str1[m-1] ==  str2[n-1]:
                return 1+LCS(str1,str2,m-1,n-1)
            
            else:
                return max(LCS(str1,str2,m-1,n),LCS(str1,str2,m,n-1))
            
        return len_worst_case - LCS(str1,str2,m,n)
        
____________________________________________________________________________________________________________________________________

Variation 2:  Printing Shortest Common Supersequence:

Prob:  https://leetcode.com/problems/shortest-common-supersequence/


_____________________________________________________________________________________________________________________________________
Code:

class Solution:
    def shortestCommonSupersequence(self, text1: str, text2: str) -> str:
       
        m = len(text1)
        n = len(text2)
        dp = []
        for _ in range(m+1):
            dp.append([-1]*(n+1))

        for i in range(m+1):
            for j in range(n+1):
                if i == 0 or j == 0:
                    dp[i][j] = 0
        for i in range(1,m+1):
            for j in range(1,n+1):
                if text1[i-1] == text2[j-1]:
                    dp[i][j] = 1 + dp[i-1][j-1]
                else:
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])
                    
        # Printing SCS just like LCS

        i = m
        j = n
        lis= []
        while i > 0 and j > 0:
            if text1[i-1] == text2[j-1]:
                lis.append(text1[i-1])
                i -= 1
                j -= 1
            else:  # move in the direction of max
                if dp[i][j-1] > dp[i-1][j]:
                    lis.append(text2[j-1])  # note change we have to include them also
                    j -= 1
                else:
                    lis.append(text1[i-1]) # change
                    i -= 1

        # if either i is 0 or j is 0 then:
        # i = 0 , j > 0 vicecersa

        while i > 0:
            lis.append(text1[i-1])   # change --> in LCS if either string is 0 then we stop but here we cannot as we have to combine both.
            i -= 1

        while j > 0:
            lis.append(text2[j-1])  # change
            j -= 1
        lis.reverse()    
        return "".join(lis)


