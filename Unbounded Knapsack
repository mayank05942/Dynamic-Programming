Variation with 0/1 knapsack:

1- Mutiple instances of an item is available to choose from.
Ex: Val= [10,20,30] 30 can be choosen mutiple times till we don't overload the knapsack

2- Code Variation:

In 0/1 once we process one element we don't consider it again but here we have reconsider the item that we are selecting.
i.e max(val[i-1] + dp[i-1][j-weight[i-1]],dp[i-1][j]) will become max(val[i-1] + dp[i][j-weight[i-1]],dp[i-1][j])
                                                                                    ---- ( i-1 will become i it means we are again processing it)
                                                                                    
Code: [Tabular] --> Bottom to up approach

W = 8
val = [10, 40, 50, 70]
weight = [1, 3, 4, 5]
n = len(val)
dp = []
for _ in range(n+1):
    dp.append([-1]*(W+1))

#initialisation:

for i in range(n+1):
    for j in range(W+1):
        if i == 0:
            dp[i][j] = 0
        if j == 0:
            dp[i][j] = 0

# recursive --> to iterative

for i in range(1,n+1):
    for j in range(1,W+1):
        if weight[i-1] <= j:
            dp[i][j] = max(val[i-1]+ dp[i][j-weight[i-1]],dp[i-1][j])
        else:
            dp[i][j] = dp[i-1][j]

print(dp[n][W])
