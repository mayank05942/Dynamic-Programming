Prob: https://leetcode.com/problems/maximal-square/

Explanation: https://leetcode.com/problems/maximal-square/discuss/600149/Python-Thinking-Process-Diagrams-DP-Approach

Follow up : https://leetcode.com/problems/count-square-submatrices-with-all-ones/

_______________________________________________________________________________________________________________________________________
Code:

class Solution:
    def maximalSquare(self, arr: List[List[str]]) -> int:
        if len(arr) == 0:
            return 0
            
        m = len(arr)
        n = len(arr[0])

        dp = []

        for i in range(m+1):
            dp.append([0]*(n+1))

        for i in range(1,m+1):
            for j in range(1,n+1):
                if arr[i-1][j-1] == "1":
                    dp[i][j] = min(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])+1

        temp = 0
        for i in range(m+1):
            for j in range(n+1):
                if int(dp[i][j]) > temp:
                    temp = dp[i][j]
        #  max value in dp table will give us one side length of the square

        return temp**2  # square it to get the area

____________________________________________________________________________________________________________________________________
