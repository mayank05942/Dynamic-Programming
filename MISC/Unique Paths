Prob: https://leetcode.com/problems/unique-paths/

Explanation: 

Similar to Min Path Sum  -->    https://leetcode.com/problems/minimum-path-sum/

________________________________________________________________________________________________________________________
Code:

class Solution:
    def uniquePaths(self, n: int, m: int) -> int:
        if n == 0 and m == 0:    # if there is no grid
            return 0
        if n == 1 and m == 1:    # if there is only 1 cell in the grid
            return 1
        
        dp = []
        for _ in range(m):
            dp.append([-1]*(n))

        for i in range(m):                # base cases
            for j in range(n):
                if i == 0 and j == 0:
                    dp[i][j] = 0
                if i == 0 and j > 0:
                    dp[i][j] = 1
                if j == 0 and i > 0:
                    dp[i][j] = 1

        for i in range(1,m):
            for j in range(1,n):
                dp[i][j] = dp[i][j-1]+dp[i-1][j]

        

        return dp[m-1][n-1]

        
